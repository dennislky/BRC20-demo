{"version":3,"file":"static/js/892.1f7fa088.chunk.js","mappings":"2KAEA,MAAMA,EAAmBC,IAKlB,IALmB,WACxBC,EAAU,QACVC,EAAO,SACPC,GAAW,EAAK,OAChBC,EAAS,IACVJ,EACC,OACEK,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,KAAK,QACLC,QAAQ,YACRC,GAAI,CAAEC,gBAAiB,QAASC,aAAc,GAC9CT,QAASA,EACTC,SAAUA,EACV,cAAaC,EAAOQ,SAEnBX,GACM,C,mLCDb,MAqHA,GAAeY,EAAAA,EAAAA,KArHcC,KAE3B,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAG3C,YAAEC,EAAW,SAAEC,IAAaC,EAAAA,EAAAA,OAC5B,OACJC,EAAM,gBACNC,EAAe,SACfC,EAAQ,gBACRC,EAAe,gBACfC,EAAe,eACfC,GACER,GACE,YAAES,EAAW,UAAEC,EAAWL,SAAUM,GAAqBV,GAG/DW,EAAAA,EAAAA,YAAU,KACRd,EAAgB,GAAG,GAClB,CAACK,IAuBJ,OAAOA,GACLhB,EAAAA,EAAAA,KAAA0B,EAAAA,SAAA,CAAAnB,UACEoB,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHzB,QAAQ,WACRC,GAAI,CAAEyB,SAAU,IAAKvB,aAAc,GAAIC,SAAA,EAGvCP,EAAAA,EAAAA,KAAC8B,EAAAA,EAAW,CAAC1B,GAAI,CAAE2B,GAAI,GAAIxB,UACzBP,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CAAC5B,GAAI,CAAE6B,SAAU,IAAK1B,SAAC,0BAEpCP,EAAAA,EAAAA,KAACkC,EAAAA,EAAO,CAACC,UAAQ,KACjBR,EAAAA,EAAAA,MAACS,EAAAA,EAAW,CAAChC,GAAI,CAAEiC,GAAI,EAAGC,GAAI,EAAGP,GAAI,GAAIxB,SAAA,EACvCP,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRC,MAAM,mBACNpC,GAAI,CAAEkC,GAAI,GACVG,SAnCqBC,IAC7B7B,EAAY8B,mBAAmBD,EAAME,OAAOC,MAAM,EAmC1CA,MAAOvB,GAAeH,KAExBnB,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRC,MAAM,mBACNpC,GAAI,CAAEkC,GAAI,GACVG,SAtCqBC,IAC7B7B,EAAYiC,mBAAmBJ,EAAME,OAAOC,MAAM,EAsC1CA,MAAOtB,GAAaH,KAEtBpB,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRC,MAAM,kBACNpC,GAAI,CAAEkC,GAAI,GACVG,SAzCYC,IACpB7B,EAAYkC,kBAAkBL,EAAME,OAAOC,MAAM,EAyCzCG,KAAK,SACLH,MAAOxB,KAETrB,EAAAA,EAAAA,KAACN,EAAAA,EAAgB,CACfE,WAAW,WACXC,QA5CeoD,UACvB,IACEtC,EAAgB,UACVE,EAAYqC,kBACpB,CAAE,MAAOC,GACPC,QAAQC,MAAMF,GACdxC,EAAgBwC,EAAIG,WACtB,GAsCQxD,UACGkB,GAC2B,KAAb,OAAfC,QAAe,IAAfA,OAAe,EAAfA,EAAiBsC,UACfrC,IAAaM,EAEjBzB,OAAO,0BAGVW,IACCiB,EAAAA,EAAAA,MAAC6B,EAAAA,EAAK,CAACC,SAAS,QAAOlD,SAAA,EACrBP,EAAAA,EAAAA,KAAC0D,EAAAA,EAAU,CAAAnD,SAAC,YACXG,OAxCD,yBAmEN,IAAI,G","sources":["components/CardActionButton.js","features/transferBRC20NFT.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n}) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Alert,\n  AlertTitle,\n  Divider,\n  TextField,\n} from \"@mui/material\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\n\n// card per feature\nconst TransferBRC20NFTCard = () => {\n  // local UI state\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  // mobx store that link up with sdk wallets\n  const { walletStore, appStore } = useStore();\n  const {\n    isInit,\n    chainsAvailable,\n    walletId,\n    inscribeAddress,\n    transferAddress,\n    transferAmount,\n  } = walletStore;\n  const { fromAddress, toAddress, walletId: appStoreWalletId } = appStore;\n\n  // local UI state cleanup when sdk re-initialized\n  useEffect(() => {\n    setErrorMessage(\"\");\n  }, [isInit]);\n\n  // feature logic\n  const updateInscribeAddress = (event) => {\n    walletStore.setInscribeAddress(event.target.value);\n  };\n  const updateTransferAddress = (event) => {\n    walletStore.setTransferAddress(event.target.value);\n  };\n  const updateAmount = (event) => {\n    walletStore.setTransferAmount(event.target.value);\n  };\n  const transferBRC20NFT = async () => {\n    try {\n      setErrorMessage(\"\");\n      await walletStore.transferBRC20NFT();\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card\n        variant=\"outlined\"\n        sx={{ minWidth: 275, borderRadius: 5 }}\n        key=\"transfer-brc20-card\"\n      >\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Transfer BRC20 NFT</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <TextField\n            label=\"Inscribe Address\"\n            sx={{ pr: 1 }}\n            onChange={updateInscribeAddress}\n            value={fromAddress || inscribeAddress}\n          />\n          <TextField\n            label=\"Transfer Address\"\n            sx={{ pr: 1 }}\n            onChange={updateTransferAddress}\n            value={toAddress || transferAddress}\n          />\n          <TextField\n            label=\"Transfer Amount\"\n            sx={{ pr: 1 }}\n            onChange={updateAmount}\n            type=\"number\"\n            value={transferAmount}\n          />\n          <CardActionButton\n            buttonText=\"Transfer\"\n            onClick={transferBRC20NFT}\n            disabled={\n              !isInit ||\n              chainsAvailable?.length === 0 ||\n              (!walletId && !appStoreWalletId)\n            }\n            testId=\"transfer-brc20-nft\"\n          />\n        </CardActions>\n        {errorMessage && (\n          <Alert severity=\"error\">\n            <AlertTitle>Failure</AlertTitle>\n            {errorMessage}\n          </Alert>\n        )}\n        {/* {transferTxHashList && transferTxHashList.length ? (\n          <Alert severity=\"success\">\n            <AlertTitle>Success</AlertTitle>\n            <strong>\n              Transaction Hashes:\n              {transferTxHashList.map((data, index) => {\n                return (\n                  <p key={`data-${index}`}>\n                    <div>{`Operation: ${JSON.stringify(data.op)}`}</div>\n                    {data.txHashList.map((tx, txIndex) => {\n                      return (\n                        <div\n                          key={`tx-${txIndex}`}\n                        >{`${tx.itemId} Transaction Hash: ${tx.txHash}`}</div>\n                      );\n                    })}\n                  </p>\n                );\n              })}\n            </strong>\n          </Alert>\n        ) : null} */}\n      </Card>\n    </>\n  ) : null;\n};\n\nexport default observer(TransferBRC20NFTCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","children","observer","TransferBRC20NFTCard","errorMessage","setErrorMessage","useState","walletStore","appStore","useStore","isInit","chainsAvailable","walletId","inscribeAddress","transferAddress","transferAmount","fromAddress","toAddress","appStoreWalletId","useEffect","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","fontSize","Divider","flexItem","CardActions","pl","pr","TextField","label","onChange","event","setInscribeAddress","target","value","setTransferAddress","setTransferAmount","type","async","transferBRC20NFT","err","console","error","toString","length","Alert","severity","AlertTitle"],"sourceRoot":""}