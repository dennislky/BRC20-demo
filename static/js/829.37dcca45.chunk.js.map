{"version":3,"file":"static/js/829.37dcca45.chunk.js","mappings":"2KAEA,MAAMA,EAAmBC,IAKlB,IALmB,WACxBC,EAAU,QACVC,EAAO,SACPC,GAAW,EAAK,OAChBC,EAAS,IACVJ,EACC,OACEK,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,KAAK,QACLC,QAAQ,YACRC,GAAI,CAAEC,gBAAiB,QAASC,aAAc,GAC9CT,QAASA,EACTC,SAAUA,EACV,cAAaC,EAAOQ,SAEnBX,GACM,C,wKCFb,MA0FA,GAAeY,EAAAA,EAAAA,KA1FQC,KAErB,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAUC,IAAeF,EAAAA,EAAAA,aAG1B,YAAEG,EAAW,SAAEC,IAAaC,EAAAA,EAAAA,OAC5B,OAAEC,EAAM,gBAAEC,EAAe,SAAEC,GAAaL,GACtCK,SAAUC,GAAqBL,GAGvCM,EAAAA,EAAAA,YAAU,KACRX,EAAgB,IAChBG,GAAa,GACZ,CAACI,IAeJ,OAAOA,GACLlB,EAAAA,EAAAA,KAAAuB,EAAAA,SAAA,CAAAhB,UACEiB,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHtB,QAAQ,WACRC,GAAI,CAAEsB,SAAU,IAAKpB,aAAc,GAAIC,SAAA,EAGvCP,EAAAA,EAAAA,KAAC2B,EAAAA,EAAW,CAACvB,GAAI,CAAEwB,GAAI,GAAIrB,UACzBP,EAAAA,EAAAA,KAAC6B,EAAAA,EAAU,CAACzB,GAAI,CAAE0B,SAAU,IAAKvB,SAAC,mBAEpCP,EAAAA,EAAAA,KAAC+B,EAAAA,EAAO,CAACC,UAAQ,KACjBhC,EAAAA,EAAAA,KAACiC,EAAAA,EAAW,CAAC7B,GAAI,CAAE8B,GAAI,EAAGC,GAAI,EAAGP,GAAI,GAAIrB,UACvCP,EAAAA,EAAAA,KAACN,EAAAA,EAAgB,CACfE,WAAW,cACXC,QA1BSuC,UACjB,IACEzB,EAAgB,IAChB,MAAM0B,QAAatB,EAAYuB,aAC/BxB,EAAYuB,EACd,CAAE,MAAOE,GACPC,QAAQC,MAAMF,GACd5B,EAAgB4B,EAAIG,WACtB,GAmBQ5C,UACGoB,GAC2B,KAAb,OAAfC,QAAe,IAAfA,OAAe,EAAfA,EAAiBwB,UACfvB,IAAaC,EAEjBtB,OAAO,kBAGVW,IACCc,EAAAA,EAAAA,MAACoB,EAAAA,EAAK,CAACC,SAAS,QAAOtC,SAAA,EACrBP,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CAAAvC,SAAC,YACXG,KAGJG,GAAYA,EAAS8B,QACpBnB,EAAAA,EAAAA,MAACoB,EAAAA,EAAK,CAACC,SAAS,UAAStC,SAAA,EACvBP,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CAAAvC,SAAC,aACZiB,EAAAA,EAAAA,MAAA,UAAAjB,SAAA,CAAQ,kBAELM,EAAS,GAAGkC,YAAYC,KAAI,CAACC,EAASC,KAEnC1B,EAAAA,EAAAA,MAAA,OAAAjB,SAAA,CACG0C,EAAQE,OAAO,KAAGF,EAAQA,UADlB,gBAAeC,WAMhC1B,EAAAA,EAAAA,MAAA,UAAAjB,SAAA,CAAQ,kBACU,IACfM,EAAS,GAAGuC,iBAAiBJ,KAAI,CAACC,EAASC,KAExC1B,EAAAA,EAAAA,MAAA,KAAAjB,SAAA,CACG0C,EAAQE,OAAO,oBAAkBF,EAAQI,aAAa,wBACnCJ,EAAQK,iBAAiB,2BACnCL,EAAQM,sBAHX,sBAAqBL,aASpC,OAlDA,sBAqDN,IAAI,G","sources":["components/CardActionButton.js","features/getBalance.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n}) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Alert,\n  AlertTitle,\n  Divider,\n} from \"@mui/material\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\n\n// card per feature\nconst GetBalanceCard = () => {\n  // local UI state\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [balances, setBalances] = useState();\n\n  // mobx store that link up with sdk wallets\n  const { walletStore, appStore } = useStore();\n  const { isInit, chainsAvailable, walletId } = walletStore;\n  const { walletId: appStoreWalletId } = appStore;\n\n  // local UI state cleanup when sdk re-initialized\n  useEffect(() => {\n    setErrorMessage(\"\");\n    setBalances();\n  }, [isInit]);\n\n  // feature logic\n  const getBalance = async () => {\n    try {\n      setErrorMessage(\"\");\n      const data = await walletStore.getBalance();\n      setBalances(data);\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card\n        variant=\"outlined\"\n        sx={{ minWidth: 275, borderRadius: 5 }}\n        key=\"get-balance-card\"\n      >\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Get Balance</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <CardActionButton\n            buttonText=\"Get Balance\"\n            onClick={getBalance}\n            disabled={\n              !isInit ||\n              chainsAvailable?.length === 0 ||\n              (!walletId && !appStoreWalletId)\n            }\n            testId=\"get-balance\"\n          />\n        </CardActions>\n        {errorMessage && (\n          <Alert severity=\"error\">\n            <AlertTitle>Failure</AlertTitle>\n            {errorMessage}\n          </Alert>\n        )}\n        {balances && balances.length ? (\n          <Alert severity=\"success\">\n            <AlertTitle>Success</AlertTitle>\n            <strong>\n              Token Balances:\n              {balances[0].tokenAssets.map((balance, index) => {\n                return (\n                  <div key={`token-assets-${index}`}>\n                    {balance.symbol}: {balance.balance}\n                  </div>\n                );\n              })}\n            </strong>\n            <strong>\n              BRC20 Balances:{\" \"}\n              {balances[0].brc20TokenAssets.map((balance, index) => {\n                return (\n                  <p key={`brc20-token-assets-${index}`}>\n                    {balance.symbol}: Total Balance: {balance.totalBalance},\n                    Available Balance: {balance.availableBalance}, Transferable\n                    Balance: {balance.transferableBalance}\n                  </p>\n                );\n              })}\n            </strong>\n          </Alert>\n        ) : null}\n      </Card>\n    </>\n  ) : null;\n};\n\nexport default observer(GetBalanceCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","children","observer","GetBalanceCard","errorMessage","setErrorMessage","useState","balances","setBalances","walletStore","appStore","useStore","isInit","chainsAvailable","walletId","appStoreWalletId","useEffect","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","fontSize","Divider","flexItem","CardActions","pl","pr","async","data","getBalance","err","console","error","toString","length","Alert","severity","AlertTitle","tokenAssets","map","balance","index","symbol","brc20TokenAssets","totalBalance","availableBalance","transferableBalance"],"sourceRoot":""}