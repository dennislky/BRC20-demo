{"version":3,"file":"static/js/929.26de7da7.chunk.js","mappings":"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","sources":["components/CardActionButton.js","components/DemoDialog.js","components/DemoAutocompleteCoinType.js","components/DemoAutocompleteSegwit.js","components/DemoWalletInfo.js","features/generateMnemonic.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n}) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","import {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nconst DemoDialog = ({\n  title,\n  content,\n  closeButtonText = \"No\",\n  confirmButtonText = \"Yes\",\n  showDialog = false,\n  handleClose,\n  handleConfirm,\n}) => {\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose || handleConfirm}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {handleClose && (\n          <Button onClick={handleClose}>{closeButtonText}</Button>\n        )}\n        <Button onClick={handleConfirm} autoFocus>\n          {confirmButtonText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport { DemoDialog };\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nimport { useStore } from \"../stores\";\n\nconst DemoAutocompleteCoinType = ({\n  setCoinType,\n  setNetwork,\n  setSegwitType,\n}) => {\n  // mobx store that link up with sdk wallets\n  const { walletStore } = useStore();\n  const coinTypeOptions = walletStore.coinTypeMapping.map((data) => {\n    return {\n      network: data.network,\n      label: `${data.network} - ${data.label}`,\n      value: data.label,\n    };\n  });\n  return (\n    <Autocomplete\n      options={coinTypeOptions}\n      sx={{ width: 288, py: 1, pr: 1 }}\n      renderInput={(params) => <TextField {...params} label=\"Coin Type\" />}\n      onChange={(_, value) => {\n        setCoinType(value?.value);\n        setNetwork(value?.network === \"BTC\" ? value?.network : undefined);\n        if (value?.network !== \"BTC\") {\n          setSegwitType();\n        }\n      }}\n      isOptionEqualToValue={(option, value) => option.value === value.value}\n      groupBy={(option) => option.network}\n      data-testid=\"autocomplete-coin-type\"\n      defaultValue={coinTypeOptions[0]}\n    />\n  );\n};\n\nexport { DemoAutocompleteCoinType };\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nconst DemoAutocompleteSegwit = ({ setSegwitType }) => {\n  const segwitTypeOptions = [\n    { label: \"legacy\", value: undefined, enumValue: 0 },\n    { label: \"segwit_native\", value: \"segwit_native\", enumValue: 3 },\n    { label: \"segwit_nested\", value: \"segwit_nested\", enumValue: 1 },\n    { label: \"segwit_nested_49\", value: \"segwit_nested_49\", enumValue: 2 },\n    { label: \"segwit_taproot\", value: \"segwit_taproot\", enumValue: 4 },\n  ];\n  return (\n    <Autocomplete\n      options={segwitTypeOptions}\n      sx={{ width: 288, py: 1, pr: 1 }}\n      renderInput={(params) => <TextField {...params} label=\"Segwit Type\" />}\n      onChange={(_, value) => {\n        setSegwitType(value);\n      }}\n      isOptionEqualToValue={(option, value) =>\n        !option.value || option.value === value.value\n      }\n      groupBy={(option) => option.network}\n      data-testid=\"autocomplete-segwit\"\n      defaultValue={segwitTypeOptions[0]}\n    />\n  );\n};\n\nexport { DemoAutocompleteSegwit };\n","import { Grid, Alert, AlertTitle, Divider, IconButton } from \"@mui/material\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport ValidateIcon from \"@mui/icons-material/Verified\";\n\nimport \"./DemoWalletInfo.css\";\nimport { useStore } from \"../stores\";\nimport { observer } from \"mobx-react-lite\";\n\nconst contentCopy = (walletInfo, appStore) => {\n  navigator.clipboard.writeText(JSON.stringify(walletInfo));\n  appStore.snackBarMessage = \"Copied to clipboard\";\n  appStore.openSnackBar = true;\n};\nconst deleteWalletInfo = (callback, appStore) => {\n  appStore.snackBarMessage = \"Address deleted\";\n  appStore.openSnackBar = true;\n  callback();\n};\nconst validateAddress = (walletInfo, appStore, walletStore) => {\n  let wallet = walletStore.getWallet(walletInfo.coinType);\n  if (wallet) {\n    const isValid = wallet.validAddress({ address: walletInfo.address });\n    if (isValid) {\n      appStore.snackBarMessage = \"Address is valid\";\n      appStore.openSnackBar = true;\n    } else {\n      appStore.snackBarMessage = \"Address is invalid\";\n      appStore.openSnackBar = true;\n    }\n  } else {\n    appStore.snackBarMessage = \"No such wallet\";\n    appStore.openSnackBar = true;\n  }\n};\n\nconst DemoWalletInfo = ({ walletInfo, index, callback }) => {\n  const { appStore, walletStore } = useStore();\n  return (\n    <div>\n      <Alert severity=\"success\" data-testid={`wallet-info-${index}`}>\n        <Grid container spacing={2}>\n          <Grid item xs>\n            <AlertTitle>Success</AlertTitle>\n          </Grid>\n          <Grid item>\n            <IconButton\n              onClick={() => validateAddress(walletInfo, appStore, walletStore)}\n            >\n              <ValidateIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton onClick={() => contentCopy(walletInfo, appStore)}>\n              <ContentCopyIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton onClick={() => deleteWalletInfo(callback, appStore)}>\n              <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n        {walletInfo.coinType && <div>{`Chain: ${walletInfo.coinType}`}</div>}\n        {walletInfo.chainId ? (\n          <>\n            <br />\n            <div>{`Chain ID: ${walletInfo.chainId}`}</div>\n          </>\n        ) : null}\n        {walletInfo.segwitType && (\n          <>\n            <br />\n            <div>{`Segwit Type: ${walletInfo.segwitType}`}</div>\n          </>\n        )}\n        {walletInfo.derivedPath && (\n          <>\n            <br />\n            <div>{`Derivation Path: ${walletInfo.derivedPath}`}</div>\n          </>\n        )}\n        {walletInfo.privateKey && (\n          <>\n            <br />\n            <div>{`Private Key: ${walletInfo.privateKey}`}</div>\n          </>\n        )}\n        {walletInfo.address && (\n          <>\n            <br />\n            <div>{`Address: ${walletInfo.address}`}</div>\n          </>\n        )}\n        {walletInfo.publicKey && (\n          <>\n            <br />\n            <div>{`Public Key: ${walletInfo.publicKey}`}</div>\n          </>\n        )}\n      </Alert>\n      <Divider flexItem key=\"divider\" />\n    </div>\n  );\n};\n\nexport default observer(DemoWalletInfo);\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Alert,\n  AlertTitle,\n  Divider,\n  Grid,\n  IconButton,\n} from \"@mui/material\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport { bip39 } from \"@okxweb3/crypto-lib\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { DemoAutocompleteCoinType } from \"../components/DemoAutocompleteCoinType\";\nimport { DemoAutocompleteSegwit } from \"../components/DemoAutocompleteSegwit\";\nimport { DemoDialog } from \"../components/DemoDialog\";\nimport DemoWalletInfo from \"../components/DemoWalletInfo\";\nimport { useStore } from \"../stores\";\n\n// card per feature\nconst GenerateMnemonicCard = () => {\n  // local UI state\n  const [coinType, setCoinType] = useState(\"BTC\");\n  const [segwitType, setSegwitType] = useState();\n  const [mnemonic, setMnemonic] = useState();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n\n  // mobx store that link up with sdk wallets\n  const { walletStore, appStore } = useStore();\n  const { isInit, walletInfos, chainsAvailable } = walletStore;\n  const { walletId } = appStore;\n\n  // local UI state cleanup when sdk re-initialized\n  useEffect(() => {\n    setCoinType(\"BTC\");\n    setSegwitType();\n    setMnemonic();\n    setErrorMessage(\"\");\n    setShowDialog(false);\n  }, [isInit]);\n\n  // event handler\n  const handleDialogClose = () => {\n    setShowDialog(false);\n  };\n  const contentCopy = (mnemonic, appStore) => {\n    navigator.clipboard.writeText(mnemonic);\n    appStore.snackBarMessage = \"Copied to clipboard\";\n    appStore.openSnackBar = true;\n  };\n\n  // feature logic\n  const generateMnemonic = async () => {\n    try {\n      const result = await bip39.generateMnemonic();\n      setMnemonic(result);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const generatePrivateKey = async () => {\n    if (!coinType) {\n      setErrorMessage(\"Please select a coin type!\");\n      return;\n    }\n    if (\n      walletInfos.findIndex(\n        (walletInfo) =>\n          walletInfo.coinType === coinType &&\n          walletInfo.segwitType === segwitType?.value\n      ) > -1\n    ) {\n      setShowDialog(true);\n      return;\n    }\n    try {\n      setErrorMessage(\"\");\n      let wallet = walletStore.getWallet(coinType);\n      if (wallet) {\n        const derivePathParams = { index: 0 };\n        if (segwitType?.enumValue) {\n          Object.assign(derivePathParams, {\n            segwitType: segwitType?.enumValue,\n          });\n        }\n        console.log(derivePathParams);\n        const derivedPath = await wallet.getDerivedPath(derivePathParams);\n        const privateKey = await wallet.getDerivedPrivateKey({\n          mnemonic,\n          hdPath: derivedPath,\n        });\n        const newAddressParams = { privateKey };\n        if (segwitType?.value) {\n          Object.assign(newAddressParams, {\n            addressType:\n              segwitType?.value === \"segwit_nested_49\"\n                ? \"segwit_nested\"\n                : segwitType?.value,\n          });\n        }\n        const address = await wallet.getNewAddress(newAddressParams);\n        const walletInfo = {\n          chainId: chainsAvailable\n            ? chainsAvailable.find((chain) => chain.name === coinType)?.chainId\n            : coinType === \"BTC\"\n            ? 0\n            : 1,\n          coinType,\n          segwitType: segwitType ? segwitType.value : undefined,\n          derivedPath,\n          privateKey,\n          address: address.address,\n        };\n        if (address.publicKey) {\n          Object.assign(walletInfo, {\n            publicKey: address.publicKey,\n          });\n        }\n        walletStore.setWalletInfos([walletInfo, ...walletInfos]);\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n\n  const deletePrivateKey = (index) => {\n    walletStore.setWalletInfos(walletInfos.toSpliced(index, 1));\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card\n        variant=\"outlined\"\n        sx={{ minWidth: 275, borderRadius: 5 }}\n        key=\"generate-mnemonic-card\"\n      >\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Generate Mnemonic</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardContent sx={{ pb: 0 }}>\n          <Typography sx={{ fontSize: 20, pb: 1 }}>Mnemonic</Typography>\n        </CardContent>\n        <CardContent\n          sx={{\n            py: 1,\n            mx: 2,\n            borderRadius: 2,\n            backgroundColor: \"#f7f7f7\",\n          }}\n        >\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs>\n              {mnemonic ? (\n                <Typography\n                  sx={{\n                    minHeight: 24,\n                    fontSize: 16,\n                  }}\n                >\n                  {mnemonic}\n                </Typography>\n              ) : (\n                <Typography\n                  sx={{\n                    minHeight: 24,\n                    fontSize: 16,\n                    color: \"#929292\",\n                  }}\n                >\n                  {`Click \"Generate Mnemonic\" to randomly generate mnemonic`}\n                </Typography>\n              )}\n            </Grid>\n            <Grid item>\n              {mnemonic ? (\n                <IconButton onClick={() => contentCopy(mnemonic, appStore)}>\n                  <ContentCopyIcon />\n                </IconButton>\n              ) : null}\n            </Grid>\n          </Grid>\n        </CardContent>\n        <CardActions sx={{ p: 2 }}>\n          <CardActionButton\n            buttonText=\"Generate Mnemonic\"\n            onClick={generateMnemonic}\n            disabled={!isInit || !!mnemonic || !!walletId}\n            testId=\"generate-mnemonic\"\n          />\n        </CardActions>\n        {!!mnemonic && (\n          <>\n            <CardContent sx={{ pb: 0 }}>\n              <Typography sx={{ fontSize: 20 }}>Coin Type</Typography>\n            </CardContent>\n            <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n              <DemoAutocompleteCoinType\n                setCoinType={setCoinType}\n                setSegwitType={setSegwitType}\n              />\n              <DemoAutocompleteSegwit setSegwitType={setSegwitType} />\n              <CardActionButton\n                buttonText=\"Derive Address\"\n                onClick={generatePrivateKey}\n                disabled={!isInit || !mnemonic || !coinType}\n                testId=\"derive-address\"\n              />\n            </CardActions>\n            {errorMessage && (\n              <Alert severity=\"error\">\n                <AlertTitle>Failure</AlertTitle>\n                {errorMessage}\n              </Alert>\n            )}\n            {walletInfos &&\n              walletInfos.map((walletInfo, index) => {\n                return walletInfo ? (\n                  <DemoWalletInfo\n                    walletInfo={walletInfo}\n                    index={index}\n                    callback={() => deletePrivateKey(index)}\n                    key={`wallet-info-${index}`}\n                  />\n                ) : null;\n              })}\n          </>\n        )}\n      </Card>\n      <DemoDialog\n        title={\"Already created\"}\n        content={\n          \"The Private Key is already created, please try other coin types!\"\n        }\n        showDialog={showDialog}\n        handleConfirm={handleDialogClose}\n      ></DemoDialog>\n    </>\n  ) : null;\n};\n\nexport default observer(GenerateMnemonicCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","children","DemoDialog","title","content","closeButtonText","confirmButtonText","showDialog","handleClose","handleConfirm","_jsxs","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","DemoAutocompleteCoinType","setCoinType","setNetwork","setSegwitType","walletStore","useStore","coinTypeOptions","coinTypeMapping","map","data","network","label","value","Autocomplete","options","width","py","pr","renderInput","params","TextField","onChange","_","undefined","isOptionEqualToValue","option","groupBy","defaultValue","DemoAutocompleteSegwit","segwitTypeOptions","enumValue","observer","walletInfo","index","callback","appStore","Alert","severity","Grid","container","spacing","item","xs","AlertTitle","IconButton","validateAddress","wallet","getWallet","coinType","validAddress","address","snackBarMessage","openSnackBar","ValidateIcon","fontSize","contentCopy","navigator","clipboard","writeText","JSON","stringify","ContentCopyIcon","deleteWalletInfo","DeleteIcon","chainId","_Fragment","segwitType","derivedPath","privateKey","publicKey","Divider","flexItem","GenerateMnemonicCard","useState","mnemonic","setMnemonic","errorMessage","setErrorMessage","setShowDialog","isInit","walletInfos","chainsAvailable","walletId","useEffect","Card","minWidth","CardContent","pb","Typography","mx","alignItems","minHeight","color","CardActions","p","async","result","bip39","generateMnemonic","err","console","error","pl","findIndex","_chainsAvailable$find","derivePathParams","Object","assign","log","getDerivedPath","getDerivedPrivateKey","hdPath","newAddressParams","addressType","getNewAddress","find","chain","name","setWalletInfos","toString","DemoWalletInfo","toSpliced","deletePrivateKey","handleDialogClose"],"sourceRoot":""}